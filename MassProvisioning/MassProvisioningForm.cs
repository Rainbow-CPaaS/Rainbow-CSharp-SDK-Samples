using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

using Rainbow;

using Microsoft.Extensions.Logging;


namespace MassProvisioning
{
    public partial class MassProvisioningForm : Form
    {
        private static readonly ILogger log = Rainbow.LogFactory.CreateLogger<MassProvisioningForm>();

        // Define objects from the C# SDK
        private Rainbow.Application rbApplication = null;
        private Rainbow.Administration rbAdministration;
        Rainbow.Model.Company RbCompany = null;
        Rainbow.Model.Contact RbContact = null;

        // We will use asynchrous API. We need a way to synchromise them
        private ManualResetEvent manualResetEvent = new ManualResetEvent(false);
        private ManualResetEvent manualResetInitialization = new ManualResetEvent(false);

        // Define path where data are stored
        private String COMPANY_DATA_FILE_PATH = "./Company.json";
        private String COMPANY_ADMIN_DATA_FILE_PATH = "./CompanyAdmin.json";
        private String TEACHERS_DATA_FILE_PATH = "./TeachersList.json";
        private String STUDENTS_DATA_FILE_PATH = "./StudentsList.json";
        private String CLASSROOMS_DATA_FILE_PATH = "./ClassroomsList.json";

        // Structured data loaded from files (or generated by fake data)
        private Model.CompanyMassProvisioning Company;
        private Model.UserMassProvisioning CompanyAdmin;
        private Dictionary<String, Model.UserMassProvisioning> TeachersList; // <Teacher email, Teacher object> Teachers dictionary by teacher email
        private Dictionary<String, Model.UserMassProvisioning> StudentsList; // <Student email, Student object> Students dictionary by student email
        private Dictionary<String, Dictionary<String, List<String>>> ClassroomsList; // <Teacher email, <Classroom name, List<Student email>>> 

        private Dictionary<String, String> StudentsIDListByEmail = new Dictionary<string, string>(); //  <Student email, Rb student ID>  We need to store Students Id to add them as bubbles member (dictionary by email)
        private Dictionary<String, String> BubblesIDListByName = new Dictionary<string, string>(); //  <Bubble name, Rb Bubble ID>  We need to store Bubbles Id to manage member (dictionary by name)


        // How many teachers/student are created in same time
        int nbRbUsersCreatedOrDeletedInSameTime = 25;


        #region Delegate - to update form elements

        // Define delegates to update forms elements from any thread
        //delegate void BoolArgReturningVoidDelegate(bool value);
        //delegate void ImageArgReturningVoidDelegate(System.Drawing.Image value);
        delegate void StringArgReturningVoidDelegate(string value);

        #endregion Delegate - to update form elements

        public MassProvisioningForm()
        {
            InitializeComponent();

            Init();
        }

        public void Init()
        {
            log.LogInformation("==============================================================");
            log.LogInformation("MassProvisioning started");

            // CHeck if we have all mandatory information:
            if (String.IsNullOrEmpty(ApplicationInfo.APP_ID)
                || String.IsNullOrEmpty(ApplicationInfo.APP_SECRET_KEY)
                || String.IsNullOrEmpty(ApplicationInfo.HOST_NAME)
                || String.IsNullOrEmpty(ApplicationInfo.ORGANIZATION_ADMIN_LOGIN)
                || String.IsNullOrEmpty(ApplicationInfo.ORGANIZATION_ADMIN_PWD))
            {

                labelWarning.Visible = true;

                btnCreateAll.Enabled = false;
                btnDeleteAll.Enabled = false;

                return;
            }

            labelWarning.Visible = false;


        }

        public static String HumanizeDateTime(DateTime dt)
        {
            String result;

            DateTime nowInUTC = DateTime.UtcNow;
            DateTime dtInUTC = dt.ToUniversalTime();

            DateTime dtLocalTime = dt.ToLocalTime();

            if (nowInUTC.Day == dtInUTC.Day)
                result = dtLocalTime.ToString("H:mm");
            else if (nowInUTC.Year == dtInUTC.Year)
                result = dtLocalTime.ToString("dd MMM H:mm");
            else
                result = dtLocalTime.ToString("dd MMM yy H:mm");

            return result;
        }

        private void AddStatusMessage(string message)
        {
            if (tbLog.InvokeRequired)
            {
                StringArgReturningVoidDelegate d = new StringArgReturningVoidDelegate(AddStatusMessage);
                this.Invoke(d, new object[] { message });
            }
            else
            {
                if (!String.IsNullOrEmpty(message))
                {
                    tbLog.Text = message + "\r\n" + tbLog.Text;
                    log.LogInformation($"StatusMessage:[{message}]");
                }
            }
        }

        private void btnGenerateFakeData_Click(object sender, EventArgs e)
        {
            int nbStudents = int.Parse(tbNbStudents.Text);
            int nbTeachers = int.Parse(tbNbTeachers.Text);
            int nbClassroomsByTeacher = int.Parse(tbNbClassroomsByTeacher.Text);
            int nbStudentsByClassrooms = int.Parse(tbNbStudentsByClassrooms.Text);

            String companyName = tbCompanyName.Text;

            DateTime dateTimeStart = DateTime.UtcNow;
            AddStatusMessage($"Create Fake data - START: {HumanizeDateTime(dateTimeStart)}");

            Company = FakeData.CreateCompany(companyName);
            CompanyAdmin = FakeData.CreateCompanyAdmin(companyName);
            TeachersList = FakeData.CreateTeachers(companyName, nbTeachers);
            StudentsList = FakeData.CreateStudents(companyName, nbStudents);
            ClassroomsList = FakeData.CreateClassrooms(StudentsList, TeachersList, nbClassroomsByTeacher, nbStudentsByClassrooms);

            DateTime dateTimeEnd = DateTime.UtcNow;
            AddStatusMessage($"Create Fake data - END: NbTeachers:{TeachersList.Count} - NbStudents:{StudentsList.Count} - NbClasrooms:{ClassroomsList.Keys.Count} - Time Elapsed(sec):{dateTimeEnd.Subtract(dateTimeStart).TotalSeconds}");

            dateTimeStart = DateTime.UtcNow;
            AddStatusMessage($"Store Fake Date - START: {HumanizeDateTime(dateTimeStart)}");

            DataStorage.StoreCompanyToFile(Company, COMPANY_DATA_FILE_PATH);
            AddStatusMessage(COMPANY_DATA_FILE_PATH);

            DataStorage.StoreUserToFile(CompanyAdmin, COMPANY_ADMIN_DATA_FILE_PATH);
            AddStatusMessage(COMPANY_ADMIN_DATA_FILE_PATH);

            DataStorage.StoreUsersToFile(TeachersList, TEACHERS_DATA_FILE_PATH);
            AddStatusMessage(TEACHERS_DATA_FILE_PATH);
            
            DataStorage.StoreUsersToFile(StudentsList, STUDENTS_DATA_FILE_PATH);
            AddStatusMessage(STUDENTS_DATA_FILE_PATH);

            DataStorage.StoreClassroomsToFile(ClassroomsList, CLASSROOMS_DATA_FILE_PATH);
            AddStatusMessage(CLASSROOMS_DATA_FILE_PATH);

            dateTimeEnd = DateTime.UtcNow;
            AddStatusMessage($"Store Fake Date - END:  Time Elapsed(sec):{dateTimeEnd.Subtract(dateTimeStart).TotalSeconds}");


            AddStatusMessage("\r\n---------------------------\r\n");
        }

        private void btnLoadData_Click(object sender, EventArgs e)
        {
            DateTime dateTimeStart = DateTime.Now;
            AddStatusMessage($"Load Fake data - START: {HumanizeDateTime(dateTimeStart)}");

            Company = DataStorage.RestoreCompanyFromFile(COMPANY_DATA_FILE_PATH);
            if (Company == null)
            {
                Company = new Model.CompanyMassProvisioning();
                AddStatusMessage("*** ERROR ***  Cannot load company data");
            }

            CompanyAdmin = DataStorage.RestoreUserFromFile(COMPANY_ADMIN_DATA_FILE_PATH);
            if (CompanyAdmin == null)
            {
                CompanyAdmin = new Model.UserMassProvisioning();
                AddStatusMessage("*** ERROR ***  Cannot load company admin data");
            }

            TeachersList = DataStorage.RestoreUsersFromFile(TEACHERS_DATA_FILE_PATH);
            if (TeachersList == null)
            {
                TeachersList = new Dictionary<String, Model.UserMassProvisioning>();
                AddStatusMessage("*** ERROR ***  Cannot load teachers data");
            }

            StudentsList = DataStorage.RestoreUsersFromFile(STUDENTS_DATA_FILE_PATH);
            if (StudentsList == null)
            {
                StudentsList = new Dictionary<String, Model.UserMassProvisioning>();
                AddStatusMessage("*** ERROR ***  Cannot load students data");
            }

            ClassroomsList = DataStorage.RestoreClassroomsFromFile(CLASSROOMS_DATA_FILE_PATH);
            if (ClassroomsList == null)
            {
                ClassroomsList = new Dictionary<String, Dictionary<String, List<String>>>();
                AddStatusMessage("*** ERROR ***  Cannot load classrooms data");
            }

            DateTime dateTimeEnd = DateTime.Now;
            AddStatusMessage($"Load Fake data - END: NbTeachers:{TeachersList.Count} - NbStudents:{StudentsList.Count} - NbClasrooms:{ClassroomsList.Keys.Count} - Time Elapsed(sec):{dateTimeEnd.Subtract(dateTimeStart).TotalSeconds}");

            AddStatusMessage("\r\n---------------------------\r\n");
        }

        private void btnCreateAll_Click(object sender, EventArgs e)
        {
            /*
              STEPS TO FOLLOW:
            -------------------

              Login as organization_admin on RB
                  - CreateCompany:
                      => In this company a create a user as company_admin
              Logout organization_admin user from RB
  
              Login as company_admin on RB
                  - Create X professors (by pool of xx)
                    => store login / pwd
                  - Create Y students (by pool of yy)
                    => store userId
              Logout as company_admin from RB
  
              Loop on all professors:
                Login as professor on RB
                  - Loop on all classrooms of this professor
                    - Create a Bubble
                    - Add to bubble all students (by pool of zz)
                  - end loop on all classroms of this professor
                Logout as professor from RB
              End Loop on all professors:
             */

            Task task = new Task(() =>
            {

                DateTime startDate = DateTime.UtcNow;

                AddStatusMessage($"Create all [Company, company admin, Teachers, Students, classroorms] - START: {HumanizeDateTime(startDate)}");

                if (rbApplication == null)
                {
                    rbApplication = new Rainbow.Application("./");
                    rbAdministration = rbApplication.GetAdministration();

                    // Since we are doing mass provisioning we don't need to create a event pipe with the server
                    rbApplication.Restrictions.EventMode = Restrictions.SDKEventMode.NONE;

                    // Set a timeout to 10 seconds - we will massively access the server to create users so we can have a delay greater for that
                    rbApplication.SetTimeout(20000);

                    // Define my application info and the server to use
                    rbApplication.SetApplicationInfo(ApplicationInfo.APP_ID, ApplicationInfo.APP_SECRET_KEY);
                    rbApplication.SetHostInfo(ApplicationInfo.HOST_NAME);

                    // We want to deal with several events of the SDK
                    rbApplication.ConnectionStateChanged += RbApplication_ConnectionStateChanged;
                    rbApplication.InitializationPerformed += RbApplication_InitializationPerformed;
                }

                if (!CreateCompanyAndCompanyName())
                    return;

                if (!CreateTeachersAndStudents())
                    return;


                AddStatusMessage($"Loop on each teacher to create classrooms and set members - START");
                foreach (Model.UserMassProvisioning teacher in TeachersList.Values)
                {
                    if (!ClassroomsList.ContainsKey(teacher.Email))
                        AddStatusMessage($"\tCannot get list of classroom for this teacher:[{teacher.Email}]");
                    else
                    {
                        // Login as teacher
                        if (LoginAs(teacher.Email, teacher.Password, teacher.Id))
                        {
                            if (CreateClassroomsForTeacher(teacher))
                            {

                                //// Need to have Bubble ID
                                //List<Rainbow.Model.Bubble> bubbles = GetAllBubbles();
                                //BubblesIDListByName = bubbles.ToDictionary(x => x.Name, x => x.Id);
                                //SetClassroomsMembersForTeacher(teacher);
                            }

                            // Logout as teacher
                            Logout();
                        }
                    }
                }
                AddStatusMessage($"Loop on each teacher to create classrooms and set members - END");


                AddStatusMessage($"Loop on each teacher to set classrooms members - START");
                foreach (Model.UserMassProvisioning teacher in TeachersList.Values)
                {
                    if (!ClassroomsList.ContainsKey(teacher.Email))
                        AddStatusMessage($"\tCannot get list of classroom for this teacher:[{teacher.Email}]");
                    else
                    {
                        // Login as teacher
                        if (LoginAs(teacher.Email, teacher.Password, teacher.Id))
                        {
                            //if (CreateClassroomsForTeacher(teacher))
                            {

                                // Need to have Bubble ID
                                List<Rainbow.Model.Bubble> bubbles = GetAllBubbles();
                                BubblesIDListByName = bubbles.ToDictionary(x => x.Name, x => x.Id);
                                SetClassroomsMembersForTeacher(teacher);
                            }

                            // Logout as teacher
                            Logout();
                        }
                    }
                }
                AddStatusMessage($"Loop on each teacher to set classrooms members - END");



                DateTime endDate = DateTime.UtcNow;
                String outputDelay = GetOutputDelay(endDate.Subtract(startDate));
                AddStatusMessage($"Create all [Company, company admin, Teachers, Students, classroorms] - END: {HumanizeDateTime(endDate)}");


                int NbClassroormsByTeachers = ClassroomsList.Values.ElementAt(0).Count;
                int NbStudentsByClassrooms = ClassroomsList.Values.ElementAt(0).ElementAt(0).Value.Count;
                int nbTotalClassrooms = NbClassroormsByTeachers * TeachersList.Count;
                AddStatusMessage($"Create all - NbStudents:[{StudentsList.Count}]  - NbTeachers:[{TeachersList.Count}]  - NbClassroormsByTeachers:[{NbClassroormsByTeachers}] - NbTotalClassrooms:[{nbTotalClassrooms}] - NbStudentsByClassrooms:[{NbStudentsByClassrooms}] - Time Elased: {outputDelay}");

                AddStatusMessage("\r\n---------------------------\r\n");


            });
            task.Start();
        }

        private String GetOutputDelay(TimeSpan timeSpan)
        {
            String outputDelay = "";

            int totalDays = (int)Math.Floor(timeSpan.TotalDays);
            if (totalDays > 0)
            {
                timeSpan = timeSpan.Subtract(TimeSpan.FromDays(totalDays));
                outputDelay = $"{totalDays} J";
            }

            int totalHours = (int)Math.Floor(timeSpan.TotalHours);
            if (totalHours > 0)
            {
                timeSpan = timeSpan.Subtract(TimeSpan.FromHours(totalHours));

                if (!String.IsNullOrEmpty(outputDelay))
                    outputDelay += ", ";
                outputDelay += $"{totalHours} H";
            }

            int totalMinutes = (int)Math.Floor(timeSpan.TotalMinutes);
            if (totalMinutes > 0)
            {
                timeSpan = timeSpan.Subtract(TimeSpan.FromMinutes(totalMinutes));

                if (!String.IsNullOrEmpty(outputDelay))
                    outputDelay += ", ";
                outputDelay += $"{totalMinutes} mn";
            }

            int totalSeconds = (int)Math.Floor(timeSpan.TotalSeconds);
            if (totalSeconds > 0)
            {
                timeSpan = timeSpan.Subtract(TimeSpan.FromSeconds(totalSeconds));

                if (!String.IsNullOrEmpty(outputDelay))
                    outputDelay += ", ";
                outputDelay += $"{totalSeconds} s";
            }

            return outputDelay;
        }

        private void btnDeleteAll_Click(object sender, EventArgs e)
        {
            Task task = new Task(() =>
            {
                DateTime startDate = DateTime.UtcNow;

                String message;

                // STEPS:
                // Login as company_admin
                //      Delete all users (teachers / student except company_admin)
                // Logout as company_admin
                // Login as organization_admin
                //      Delete company_admin
                //      Delete company
                // Logout as organization_admin

                rbApplication = new Rainbow.Application("./");
                rbAdministration = rbApplication.GetAdministration();

                // Since we are doing mass provisioning we don't need to create a event pipe with the server
                rbApplication.Restrictions.EventMode = Restrictions.SDKEventMode.NONE;

                // Set a timeout to 10 seconds - we will massively access the server to create users so we can have a delay greater for that
                rbApplication.SetTimeout(10000);

                // Define my application info and the server to use
                rbApplication.SetApplicationInfo(ApplicationInfo.APP_ID, ApplicationInfo.APP_SECRET_KEY);
                rbApplication.SetHostInfo(ApplicationInfo.HOST_NAME);

                // We want to deal with several events of the SDK
                rbApplication.ConnectionStateChanged += RbApplication_ConnectionStateChanged;
                rbApplication.InitializationPerformed += RbApplication_InitializationPerformed;

                // --------------------------------------------------------

                AddStatusMessage($"Use company_admin to delete all users (teachers, students except himself) - START: {HumanizeDateTime(startDate)}");

                // Login to the Rainbow server as company_admin
                if (!LoginAsCompanyAdmin())
                    return;

                // Delete all users
                DeleteAllUsersExceptCompanyAdmin();

                // Logout from RB 
                Logout();

                AddStatusMessage("Use company_admin to delete all users (teachers, students except himself) - END");

                // --------------------------------------------------------

                AddStatusMessage("Use organization_admin to delete company_admin and delete company - START");

                if (!LoginAsOrganizationAdmin())
                    return;


                if (!DeleteCompanyAdminAndCompany())
                    return;

                // Logout from RB 
                Logout();



                // --------------------------------------------------------

                DateTime endDate = DateTime.UtcNow;
                String outputDelay = GetOutputDelay(endDate.Subtract(startDate));

                AddStatusMessage($"Use company_admin to delete all users (teachers, students except himself) - END: {HumanizeDateTime(endDate)}");

                int NbClassroormsByTeachers = ClassroomsList.Values.ElementAt(0).Count;
                int NbStudentsByClassrooms = ClassroomsList.Values.ElementAt(0).ElementAt(0).Value.Count;
                int nbTotalClassrooms = NbClassroormsByTeachers * TeachersList.Count;
                AddStatusMessage($"Delete all - NbStudents:[{StudentsList.Count}]  - NbTeachers:[{TeachersList.Count}]  - NbClassroormsByTeachers:[{NbClassroormsByTeachers}] - NbTotalClassrooms:[{nbTotalClassrooms}] - NbStudentsByClassrooms:[{NbStudentsByClassrooms}] - Time Elased: {outputDelay}");


                AddStatusMessage("\r\n---------------------------\r\n");

            });
            task.Start();

        }


        private Boolean CreateClassroomsForTeacher(Model.UserMassProvisioning teacher)
        {
            /// STEP TO FOLLOW
            ///     - Get bubbles (i.e. classroom) already created
            ///     - Check if one or several classrooms must be created


            Dictionary<String, List<String>> classroomsListForTeacher = ClassroomsList[teacher.Email];

            AddStatusMessage($"\tCreate necessary classrooms as teacher[{teacher.Email}] - START");

            // Get all bubbles of the teacher
            List<Rainbow.Model.Bubble> bubbles = GetAllBubbles();
            if (bubbles == null)
                return false;

            // Loop on all bubbles(i.e. classrooms) to know which classrooms must be created
            AddStatusMessage("\t\tCheck classrooms already created - START");
            List<String> bubblesCreated = new List<string>();
            foreach (Rainbow.Model.Bubble bubbleItem in bubbles)
            {
                if (classroomsListForTeacher.ContainsKey(bubbleItem.Name))
                    bubblesCreated.Add(bubbleItem.Name);
            }
            AddStatusMessage($"\t\tCheck classrooms already created - Nb already created:[{bubblesCreated.Count}] - END");


            String message = "";
            List<String> bubblesNotCreated = new List<string>();
            List<String> bubblesToCreate = new List<string>();

            ManualResetEvent[] ManualResetEventList;

            object lockObject = new object();

            int nbMaxToCreate;
            int indexClassrooms;
            String idClassroom;

            // Get Bubbles service
            Rainbow.Bubbles rbBubbles = rbApplication.GetBubbles();

            if (bubblesCreated.Count == classroomsListForTeacher.Count)
                AddStatusMessage($"\t\tNo need to create classrooms - they are all already created");
            else
            {
                // Create missing bubbles (i.e. classrooms)
                AddStatusMessage($"\t\tCreate classrooms - START");

                // We create several classrooms in parallel 
                //  - We must check if all are created correctly
                //  - We must store the result too
                ManualResetEventList = new ManualResetEvent[nbRbUsersCreatedOrDeletedInSameTime];
                indexClassrooms = 0;

                // Create defaut array of ManualResetEvent
                for (int index = 0; index < nbRbUsersCreatedOrDeletedInSameTime; index++)
                    ManualResetEventList[index] = new ManualResetEvent(true);

                do
                {
                    /// START - Create a list of next X classrooms id to create

                    // Clear list of classrooms to create
                    bubblesToCreate.Clear();

                    // How many max classrooms can we create
                    nbMaxToCreate = Math.Min(nbRbUsersCreatedOrDeletedInSameTime, classroomsListForTeacher.Keys.Count - bubblesCreated.Count);

                    // Get next X classrooms to create
                    do
                    {
                        idClassroom = classroomsListForTeacher.ElementAt(indexClassrooms).Key;
                        if (!bubblesToCreate.Contains(idClassroom))
                            bubblesToCreate.Add(idClassroom);

                        indexClassrooms++;
                        if (indexClassrooms >= classroomsListForTeacher.Keys.Count)
                            indexClassrooms = 0;

                    } while (bubblesToCreate.Count != nbMaxToCreate);

                    /// END - Create a list of next X classrooms id to create


                    /// START - Ask the server to create X classrooms

                    for (int index = 0; index < bubblesToCreate.Count; index++)
                    {
                        String id = bubblesToCreate[index];
                        ManualResetEvent manualResetEventList = ManualResetEventList[index];

                        manualResetEventList.Reset();

                        rbBubbles.CreateBubble(id, "", Rainbow.Model.Bubble.BubbleVisibility.AsPrivate, callback =>
                        {
                            if (!callback.Result.Success)
                            {
                                lock (lockObject)
                                {
                                    if (!bubblesNotCreated.Contains(id))
                                        bubblesNotCreated.Add(id);
                                }
                                log.LogError($"Cannot create bubble: id/name:[{id} - Error:[{message}]");

                                AddStatusMessage($"\t\t\t*** ERROR *** - Cannot create bubble: id/name:[{id} - Error:[{message}]");
                            }
                            else
                            {
                                lock (lockObject)
                                {
                                    if (!bubblesCreated.Contains(id))
                                        bubblesCreated.Add(id);
                                }
                            }

                            manualResetEventList.Set();
                        });
                    }

                    // Wait all bubbles creation before to continue
                    WaitHandle.WaitAll(ManualResetEventList.ToArray());

                    AddStatusMessage($"\t\t\tNb classrooms created:[{bubblesCreated.Count}]");

                    /// END - Ask the server to create X bubbles

                }
                while (bubblesCreated.Count < classroomsListForTeacher.Keys.Count);

                AddStatusMessage($"\t\tCreate classrooms - END");
            }


            AddStatusMessage($"\tCreate necessary classrooms as teacher[{teacher.Email}] - END");

            return true;
        }


        private Boolean SetClassroomsMembersForTeacher(Model.UserMassProvisioning teacher)
        {
            Dictionary<String, List<String>> classroomsListForTeacher = ClassroomsList[teacher.Email];

            AddStatusMessage($"\tSet classrooms members for teacher[{teacher.Email}] - START");


            // Get Bubbles service
            Rainbow.Bubbles rbBubbles = rbApplication.GetBubbles();

            String message = "";

            List<String> bubblesMembersSet = new List<string>();
            List<String> bubblesMembersToSet = new List<string>();

            ManualResetEvent[] ManualResetEventList;

            object lockObject = new object();

            int nbMaxToManage;
            int indexClassrooms;
            String idClassroom;

            ManualResetEventList = new ManualResetEvent[nbRbUsersCreatedOrDeletedInSameTime];
            indexClassrooms = 0;

            // Create defaut array of ManualResetEvent
            for (int index = 0; index < nbRbUsersCreatedOrDeletedInSameTime; index++)
                ManualResetEventList[index] = new ManualResetEvent(true);

            do
            {
                /// START - Create a list of next X classrooms id to set members

                // Clear list of classrooms to set members
                bubblesMembersToSet.Clear();

                // How many max classrooms can we create
                nbMaxToManage = Math.Min(nbRbUsersCreatedOrDeletedInSameTime, classroomsListForTeacher.Keys.Count - bubblesMembersSet.Count);

                // Get next X classrooms to set members
                do
                {
                    idClassroom = classroomsListForTeacher.ElementAt(indexClassrooms).Key;
                    if (!bubblesMembersToSet.Contains(idClassroom))
                        bubblesMembersToSet.Add(idClassroom);

                    indexClassrooms++;
                    if (indexClassrooms >= classroomsListForTeacher.Keys.Count)
                        indexClassrooms = 0;

                } while (bubblesMembersToSet.Count != nbMaxToManage);

                /// END - Create a list of next X classrooms id to set members


                /// START - Ask the server to set X classrooms members

                for (int index = 0; index < bubblesMembersToSet.Count; index++)
                {

                    String bubbleName = bubblesMembersToSet[index];
                    String bubbleId = BubblesIDListByName[bubbleName]; // Get Bubble Id
                    Boolean addMemberError = false;
                    // Create list of members by Id.
                    List<String> membersByID = new List<string>();
                    List<String> membersByEmail = classroomsListForTeacher[bubbleName];
                    foreach (String email in membersByEmail)
                    {
                        if (StudentsIDListByEmail.ContainsKey(email))
                            membersByID.Add(StudentsIDListByEmail[email]);
                    }

                    ManualResetEvent manualResetEventList = ManualResetEventList[index];
                    manualResetEventList.Reset();

                    rbBubbles.AddContacts(bubbleId, membersByID, null, null, callback =>
                    {
                        if (!callback.Result.Success)
                        {
                            addMemberError = true;
                            message = callback.Result.ToString();

                            if (callback.Result.IncorrectUseError != null)
                            {
                                if (callback.Result.IncorrectUseError.ErrorCode == 409) // Member(s) already added
                                    addMemberError = false;
                            }
                        }

                        if (addMemberError)
                        {
                            log.LogError($"Cannot set members to bubble: BubbleId:[{bubbleId}] -  BubbleName:[{bubbleName}] - Error:[{message}]");

                            AddStatusMessage($"\t\t*** ERROR *** - Cannot set members to bubble: BubbleId:[{bubbleId}] -  BubbleName:[{bubbleName}] - Error:[{message}]");
                        }
                        else
                        {
                            lock (lockObject)
                            {
                                if (!bubblesMembersSet.Contains(bubbleName))
                                    bubblesMembersSet.Add(bubbleName);
                            }
                        }

                        manualResetEventList.Set();
                    });
                }

                // Wait all bubbles members management before to continue
                WaitHandle.WaitAll(ManualResetEventList.ToArray());

                AddStatusMessage($"\t\tNb classrooms with members set:[{bubblesMembersSet.Count}]");

                /// END - Ask the server to set X classrooms members

            }
            while (bubblesMembersSet.Count < classroomsListForTeacher.Keys.Count);


            AddStatusMessage($"\tSet classrooms members for teacher[{teacher.Email}] - END");

            return true;
        }

        private Boolean CreateTeachersAndStudents()
        {
            // Login to the Rainbow server as company_admin
            AddStatusMessage("Use company_admin to create teachers, students - START");

            // Login as company admin
            if (!LoginAsCompanyAdmin())
                return false;

            // Create teachers
            if (!CreateTeachers())
                return false;

            // Create students
            if (!CreateStudents())
                return false;

            // Get all contacts => need to store all students ID
            List<Rainbow.Model.Contact> contacts = GetAllContacts();
            StudentsIDListByEmail.Clear();
            if (contacts != null)
            {
                foreach (Rainbow.Model.Contact contactItem in contacts)
                {
                    if (StudentsList.ContainsKey(contactItem.LoginEmail.ToLower()))
                        StudentsIDListByEmail.Add(contactItem.LoginEmail.ToLower(), contactItem.Id);
                }
            }

            // Logout
            Logout();

            AddStatusMessage("Use company_admin to create teachers, students - END");

            // ---------------------------------------------------------------------------------------------------------

            return true;
        }

        private Boolean CreateTeachers()
        {
            String message = "";
            ManualResetEvent manualResetEvent = new ManualResetEvent(false);
            List<String> teachersNotCreated = new List<string>();
            List<String> teachersCreated = new List<string>();
            List<String> teachersToCreate = new List<string>();

            // Get all users
            List<Rainbow.Model.Contact> contacts = GetAllContacts();
            if (contacts == null)
                return false;

            // We need to check if some teachers are already created or not.
            AddStatusMessage("\tCheck teachers already created - START");
            foreach (Rainbow.Model.Contact contactItem in contacts)
            {
                if (TeachersList.ContainsKey(contactItem.LoginEmail.ToLower()))
                    teachersCreated.Add(contactItem.LoginEmail.ToLower());
            }
            AddStatusMessage($"\tCheck teachers already created - Nb already created:[{teachersCreated.Count}]- END");

            if (teachersCreated.Count == TeachersList.Count)
                AddStatusMessage($"\tNo need to create teachers - they are all already created");
            else
            {
                AddStatusMessage($"\tCreate teachers - START");

                // We create several teachers in parallel 
                //  - We must check if all are created correctly
                //  - We must store the result too
                ManualResetEvent[] ManualResetEventList = new ManualResetEvent[nbRbUsersCreatedOrDeletedInSameTime];

                object lockObject = new object();

                int nbMaxToCreate;
                int indexTeacher = 0; ;
                String idTeacher;


                // Create defaut array of ManualResetEvent
                for (int index = 0; index < nbRbUsersCreatedOrDeletedInSameTime; index++)
                    ManualResetEventList[index] = new ManualResetEvent(true);

                do
                {
                    /// START - Create a list of next X teachers id to create

                    // Clear list of teachers to create
                    teachersToCreate.Clear();

                    // How many max teachers can we create
                    nbMaxToCreate = Math.Min(nbRbUsersCreatedOrDeletedInSameTime, TeachersList.Keys.Count - teachersCreated.Count);

                    // Get next X teachers to create
                    do
                    {
                        idTeacher = TeachersList.ElementAt(indexTeacher).Key;
                        if (!teachersToCreate.Contains(idTeacher))
                            teachersToCreate.Add(idTeacher);

                        indexTeacher++;
                        if (indexTeacher >= TeachersList.Keys.Count)
                            indexTeacher = 0;

                    } while (teachersToCreate.Count != nbMaxToCreate);

                    /// END - Create a list of next X teachers id to create


                    /// START - Ask the server to create X teachers

                    for (int index = 0; index < teachersToCreate.Count; index++)
                    {
                        String id = teachersToCreate[index];
                        ManualResetEvent manualResetEventList = ManualResetEventList[index];

                        manualResetEventList.Reset();

                        Model.UserMassProvisioning teacher = TeachersList[id];

                        Boolean userCreationError = false;

                        rbAdministration.CreateUser(teacher.Email, teacher.Password, teacher.FirstName, teacher.LastName, null, null, true, false, callback =>
                        {
                            if (!callback.Result.Success)
                            {
                                userCreationError = true;
                                message = callback.Result.ToString();

                                if (callback.Result.IncorrectUseError != null)
                                {
                                    if (callback.Result.IncorrectUseError.ErrorCode == 409) // User already exists
                                        userCreationError = false;
                                }
                            }

                            if (userCreationError)
                            {
                                lock (lockObject)
                                {
                                    if (!teachersNotCreated.Contains(id))
                                        teachersNotCreated.Add(id);
                                }
                                log.LogError($"Cannot create teacher: email:[{teacher.Email} - Error:[{message}]");

                                AddStatusMessage($"\t\t*** ERROR *** - Cannot create teacher: Id:[{id}] - Error:[{message}");
                            }
                            else
                            {
                                lock (lockObject)
                                {
                                    if (!teachersCreated.Contains(id))
                                        teachersCreated.Add(id);
                                }
                            }

                            manualResetEventList.Set();
                        });
                    }

                    // Wait all teachers creation before to continue
                    WaitHandle.WaitAll(ManualResetEventList.ToArray());

                    AddStatusMessage($"\t\tNb Teachers created:[{teachersCreated.Count}]");

                    /// END - Ask the server to create X teachers

                }
                while (teachersCreated.Count < TeachersList.Keys.Count);

                AddStatusMessage($"\tCreate teachers - END");
            }

            return true;
        }

        private Boolean CreateStudents()
        {
            String message = "";
            ManualResetEvent manualResetEvent = new ManualResetEvent(false);
            List<String> studentsNotCreated = new List<string>();
            List<String> studentsCreated = new List<string>();
            List<String> studentsToCreate = new List<string>();

            // Get all users
            List<Rainbow.Model.Contact> contacts = GetAllContacts();
            if (contacts == null)
                return false;

            // We need to check if some students are already created or not.
            AddStatusMessage("\tCheck students already created - START");
            foreach (Rainbow.Model.Contact contactItem in contacts)
            {
                if (StudentsList.ContainsKey(contactItem.LoginEmail.ToLower()))
                    studentsCreated.Add(contactItem.LoginEmail.ToLower());
            }
            AddStatusMessage($"\tCheck students already created - Nb already created:[{studentsCreated.Count}]- END");

            if (studentsCreated.Count == StudentsList.Count)
                AddStatusMessage($"\tNo need to create students - they are all already created");
            else
            {
                AddStatusMessage($"\tCreate students - START");

                // We create several students in parallel 
                //  - We must check if all are created correctly
                //  - We must store the result too
                ManualResetEvent[] ManualResetEventList = new ManualResetEvent[nbRbUsersCreatedOrDeletedInSameTime];

                object lockObject = new object();

                int nbMaxToCreate;
                int indexStudent = 0; ;
                String idStudent;


                // Create defaut array of ManualResetEvent
                for (int index = 0; index < nbRbUsersCreatedOrDeletedInSameTime; index++)
                    ManualResetEventList[index] = new ManualResetEvent(true);

                do
                {
                    /// START - Create a list of next X students id to create

                    // Clear list of students to create
                    studentsToCreate.Clear();

                    // How many max students can we create
                    nbMaxToCreate = Math.Min(nbRbUsersCreatedOrDeletedInSameTime, StudentsList.Keys.Count - studentsCreated.Count);

                    // Get next X students to create
                    do
                    {
                        idStudent = StudentsList.ElementAt(indexStudent).Key;
                        if (!studentsToCreate.Contains(idStudent))
                            studentsToCreate.Add(idStudent);

                        indexStudent++;
                        if (indexStudent >= StudentsList.Keys.Count)
                            indexStudent = 0;

                    } while (studentsToCreate.Count != nbMaxToCreate);

                    /// END - Create a list of next X students id to create


                    /// START - Ask the server to create X students

                    for (int index = 0; index < studentsToCreate.Count; index++)
                    {
                        String id = studentsToCreate[index];
                        ManualResetEvent manualResetEventList = ManualResetEventList[index];

                        manualResetEventList.Reset();

                        Model.UserMassProvisioning student = StudentsList[id];

                        Boolean userCreationError = false;

                        rbAdministration.CreateUser(student.Email, student.Password, student.FirstName, student.LastName, null, null, true, false, callback =>
                        {
                            if (!callback.Result.Success)
                            {
                                userCreationError = true;
                                message = callback.Result.ToString();

                                if (callback.Result.IncorrectUseError != null)
                                {
                                    if (callback.Result.IncorrectUseError.ErrorCode == 409) // User already exists
                                        userCreationError = false;
                                }
                            }

                            if (userCreationError)
                            {
                                lock (lockObject)
                                {
                                    if (!studentsNotCreated.Contains(id))
                                        studentsNotCreated.Add(id);
                                }
                                log.LogError($"Cannot create student: email:[{student.Email} - Error:[{message}]");

                                AddStatusMessage($"\t\t*** ERROR *** - Cannot create student: Id:[{id}] - Error:[{message}");
                            }
                            else
                            {
                                lock (lockObject)
                                {
                                    if (!studentsCreated.Contains(id))
                                        studentsCreated.Add(id);
                                }
                            }

                            manualResetEventList.Set();
                        });
                    }

                    // Wait all students creation before to continue
                    WaitHandle.WaitAll(ManualResetEventList.ToArray());

                    AddStatusMessage($"\t\tNb students created:[{studentsCreated.Count}]");

                    /// END - Ask the server to create X students

                }
                while (studentsCreated.Count < StudentsList.Keys.Count);

                AddStatusMessage($"\tCreate students - END");
            }

            return true;
        }

        private Boolean DeleteCompanyAdminAndCompany()
        {
            String message = "";
            bool companyFound = false;

            // Get all companies
            List<Rainbow.Model.Company> companies = GetAllCompanies();
            if (companies == null)
                return false;

            // Loop on companies to find the correct one
            AddStatusMessage("\tCheck correct company - START");
            foreach (Rainbow.Model.Company companyItem in companies)
            {
                if (companyItem.Name.Equals(Company.Name, StringComparison.InvariantCultureIgnoreCase))
                {
                    companyFound = true;

                    // Store company info
                    RbCompany = companyItem;
                    break;
                }
            }

            if (!companyFound)
                AddStatusMessage("\tCheck correct company - Company NOT found - END");
            else
            {
                AddStatusMessage("\tCheck correct company - Company found - END");

                // Get users of this company - it should be have only one ...
                List<Rainbow.Model.Contact> contacts = GetAllContacts(RbCompany.Id);
                if (contacts == null)
                    return false;

                // Get the list of users by Id
                List<String> usersToDelete = contacts.Select(x => x.Id).ToList();

                if (!DeleteUsers(usersToDelete))
                    return false;

                AddStatusMessage("\tDelete company - START");
                ManualResetEvent manualResetEvent = new ManualResetEvent(false);
                rbAdministration.DeleteCompany(RbCompany.Id, callback =>
                {
                    if (!callback.Result.Success)
                    {
                        log.LogError($"Cannot delete company: companyId:[{RbCompany.Id}] - Error:[{message}]");

                        AddStatusMessage($"\t\t*** ERROR *** - Cannot delete company: companyId:[{RbCompany.Id}] - Error:[{message}]");
                    }
                    manualResetEvent.Set();
                });
                manualResetEvent.WaitOne();
                AddStatusMessage("\tDelete company - END");
            }

            if (!String.IsNullOrEmpty(message))
                return false;


            return true;
        }

        private List<Rainbow.Model.Company> GetAllCompanies()
        {
            List<Rainbow.Model.Company> result = new List<Rainbow.Model.Company>();

            String message = "";
            ManualResetEvent manualResetEvent = new ManualResetEvent(false);

            AddStatusMessage("\tGet all companies - START");
            bool noMoreCompanies = false;

            int offset = 0;
            int nbAsked = 200;
            do
            {
                manualResetEvent.Reset();
                rbAdministration.GetCompanies(Rainbow.Model.Contact.Details.Small, offset, nbAsked, null, callback =>
                {

                    if (callback.Result.Success)
                    {
                        Rainbow.Model.CompaniesResult companiesResult = callback.Data;

                        result.AddRange(companiesResult.Data);

                        // Do we need to continue to ask more companies
                        if ((companiesResult.Data.Count < nbAsked))
                            noMoreCompanies = true;
                        else
                            offset += nbAsked;
                    }
                    else
                    {
                        message = callback.Result.ToString();
                        log.LogError($"Cannot get the list of companies - Error[{message}]");
                    }
                    manualResetEvent.Set();

                });
                manualResetEvent.WaitOne();

            } while ((!noMoreCompanies) && String.IsNullOrEmpty(message));


            if (!String.IsNullOrEmpty(message))
            {
                AddStatusMessage($"\t\t*** ERROR *** - Cannot get the list of companies:[{message}");
                return null;
            }

            AddStatusMessage($"\tGet all companies - Nb companies:[{result.Count}] - END");
            return result;
        }

        private List<Rainbow.Model.Contact> GetAllContacts(String companyId = null)
        {
            List<Rainbow.Model.Contact> result = new List<Rainbow.Model.Contact>();

            String message = "";

            ManualResetEvent manualResetEvent = new ManualResetEvent(false);

            AddStatusMessage("\tGet all contacts - START");
            int offset = 0;
            int nbAsked = 200;

            Boolean noMoreUsers = false;
            do
            {
                manualResetEvent.Reset();
                rbAdministration.GetUsers(Rainbow.Model.Contact.Details.Small, offset, nbAsked, companyId, null, null, null, callback =>
                {
                    if (callback.Result.Success)
                    {
                        Rainbow.Model.ContactsResult contactsResult = callback.Data;

                        result.AddRange(contactsResult.Data);

                        // Do we need to continue to ask more users ?
                        if ((contactsResult.Data.Count < nbAsked))
                            noMoreUsers = true;
                        else
                            offset += nbAsked;
                    }
                    else
                    {
                        message = callback.Result.ToString();
                        log.LogError($"Cannot get the list of users - Error[{message}]");
                    }
                    manualResetEvent.Set();

                });
                manualResetEvent.WaitOne();
            } while ((!noMoreUsers) && String.IsNullOrEmpty(message));

            if (!String.IsNullOrEmpty(message))
            {
                AddStatusMessage($"\t\t*** ERROR *** - Cannot get the list of users :[{message}");
                return null;
            }
            AddStatusMessage($"\tGet all contacts  - Nb:[{result.Count}] - END");

            return result;
        }

        private Boolean CreateCompanyAndCompanyName()
        {
            String message = "";

            // START - LOGIN WITH organization_admin ON RB
            AddStatusMessage("Use organization_admin to create new company and a new company_admin - START");

            // Login as organization_admin
            if (!LoginAsOrganizationAdmin())
                return false;

            // Get All companies
            List<Rainbow.Model.Company> companies = GetAllCompanies();

            // Check if the company already exists
            bool companyFound = false;
            AddStatusMessage("\tCheck if company already exists - START");
            if (companies != null)
            {
                foreach (Rainbow.Model.Company companyItem in companies)
                {
                    if (companyItem.Name.Equals(Company.Name, StringComparison.InvariantCultureIgnoreCase))
                    {
                        companyFound = true;

                        // Store company info
                        RbCompany = companyItem;
                        break;
                    }
                }
            }

            // Create the company if necessary
            if (companyFound)
                AddStatusMessage("\tCheck if company already exists - END");
            else
            {
                AddStatusMessage("\tCheck if company already exists - Company NOT found - END");


                AddStatusMessage("\tCreate company - START");
                manualResetEvent.Reset();
                message = "";
                rbAdministration.CreateCompany(Company.Name, Company.Country, Company.State, callback =>
                {
                    if (callback.Result.Success)
                        RbCompany = callback.Data;
                    else
                        message = callback.Result.ToString();
                    manualResetEvent.Set();

                });
                manualResetEvent.WaitOne();

                if (!String.IsNullOrEmpty(message))
                {
                    AddStatusMessage($"\t\t*** ERROR *** - Cannot create company:[{message}");
                    return false;
                }
                AddStatusMessage("\tCreate company - END");
            }

            // Get all users:
            List<Rainbow.Model.Contact> contacts = GetAllContacts(RbCompany.Id);

            // Check if the company admin exists
            AddStatusMessage("\tCheck if company_admin exists - START");

            Boolean companyAdminAlreadyExists = false;
            foreach (Rainbow.Model.Contact contactFound in contacts)
            {
                if (contactFound.LoginEmail.Equals(CompanyAdmin.Email, StringComparison.InvariantCultureIgnoreCase))
                {
                    companyAdminAlreadyExists = true;
                    break;
                }
            }


            // Create the company admin
            if (companyAdminAlreadyExists)
                AddStatusMessage("\tCheck if company_admin exists - found - END");
            else
            {
                AddStatusMessage("\tCheck if company_admin exists - NOT found - END");

                AddStatusMessage("\tCreate company_admin - START");
                manualResetEvent.Reset();
                message = "";
                rbAdministration.CreateUser(CompanyAdmin.Email, CompanyAdmin.Password, CompanyAdmin.FirstName, CompanyAdmin.LastName, null, RbCompany.Id, true, true, callback =>
                {
                    if (callback.Result.Success)
                        RbContact = callback.Data;
                    else
                        message = callback.Result.ToString();
                    manualResetEvent.Set();

                });
                manualResetEvent.WaitOne();

                if (!String.IsNullOrEmpty(message))
                {
                    AddStatusMessage($"\t\t*** ERROR *** - Cannot create user as company admin:[{message}");
                    return false;
                }
                AddStatusMessage("\tCreate company_admin - END");
            }

            // Logout from RB
            Logout();

            AddStatusMessage("Use organization_admin to create new company and a new company_admin - END");

            return true;
        }

        private Boolean DeleteUsers(List<String> usersToDeleteById)
        {
            if (!(usersToDeleteById?.Count > 0))
                return true;

            String message = "";
            Object lockObject = new object();

            List<String> usersToDelete = new List<string>(usersToDeleteById);
            List<String> usersDeleted = new List<string>();

            // Delete users by pack 
            AddStatusMessage($"\tDelete all users provided - nb users:[{usersToDeleteById.Count}] - START");
            ManualResetEvent[] ManualResetEventList = new ManualResetEvent[nbRbUsersCreatedOrDeletedInSameTime];
            int nbMaxToDelete;
            int indexUser = 0; ;

            // Create defaut array of ManualResetEvent
            for (int index = 0; index < nbRbUsersCreatedOrDeletedInSameTime; index++)
                ManualResetEventList[index] = new ManualResetEvent(true);

            do
            {
                nbMaxToDelete = Math.Min(nbRbUsersCreatedOrDeletedInSameTime, usersToDelete.Count);

                for (int index = 0; index < nbMaxToDelete; index++)
                {
                    if (indexUser >= usersToDelete.Count)
                        indexUser = 0;

                    String id = usersToDelete[indexUser];
                    indexUser++;

                    ManualResetEvent manualResetEventList = ManualResetEventList[index];
                    Boolean userDeletionError = false;

                    manualResetEventList.Reset();
                    rbAdministration.DeleteUser(id, callback =>
                    {
                        if (!callback.Result.Success)
                        {
                            userDeletionError = true;
                            message = callback.Result.ToString();

                            if (callback.Result.IncorrectUseError != null)
                            {
                                if (callback.Result.IncorrectUseError.ErrorCode == 409) // User already deleted
                                    userDeletionError = false;
                            }

                        }

                        if (userDeletionError)
                        {
                            log.LogError($"Cannot delete user: userId:[{id}] - Error:[{message}]");

                            AddStatusMessage($"\t\t*** ERROR *** - Cannot delete user: userId:[{id}]- Error:[{message}");
                        }
                        else
                        {
                            lock (lockObject)
                            {
                                if (usersToDelete.Contains(id))
                                    usersToDelete.Remove(id);

                                if (!usersDeleted.Contains(id))
                                    usersDeleted.Add(id);
                            }
                        }

                        manualResetEventList.Set();
                    });
                }

                // Wait deletion before to continue
                WaitHandle.WaitAll(ManualResetEventList.ToArray());

                AddStatusMessage($"\t\tNb users deleted:[{usersDeleted.Count}]");
            }
            while (usersToDelete.Count != 0);
            AddStatusMessage($"\tDelete all users provided - nb users:[{usersToDeleteById.Count}] - END");

            return true;
        }

        private Boolean DeleteAllUsersExceptCompanyAdmin()
        {
            ManualResetEvent manualResetEvent = new ManualResetEvent(false);
            Object lockObject = new object();
            List<String> usersToDelete = new List<string>();
            List<String> usersDeleted = new List<string>();

            // Get all users 
            List<Rainbow.Model.Contact> contacts = GetAllContacts();
            if (contacts == null)
                return false;

            // Create list of users to delete avoiding company_admin
            foreach (Rainbow.Model.Contact contactItem in contacts)
            {
                if (!contactItem.LoginEmail.Equals(CompanyAdmin.Email, StringComparison.InvariantCultureIgnoreCase))
                {
                    usersToDelete.Add(contactItem.Id);
                }
            }

            return DeleteUsers(usersToDelete);

        }

        private List<Rainbow.Model.BubbleMember> GetAllBubbleMembers(String bubbleId)
        {
            List<Rainbow.Model.BubbleMember> result = null;

            String message = "";
            ManualResetEvent manualResetEvent = new ManualResetEvent(false);

            // Get Bubbles service 
            Rainbow.Bubbles RbBubbles = rbApplication.GetBubbles();

            AddStatusMessage($"\tGet all members - START");
            RbBubbles.GetAllMembers(bubbleId, callback =>
            {
                if (callback.Result.Success)
                    result = callback.Data;
                else
                {
                    message = callback.Result.ToString();
                    log.LogError($"Cannot get the list of members - Error[{message}]");
                }

                manualResetEvent.Set();
            });
            manualResetEvent.WaitOne();

            if (result != null)
                AddStatusMessage($"\tGet all members - Nb members[{result.Count}]- START");
            else
                AddStatusMessage($"\t\t*** ERROR *** - Cannot get the list of members :[{message}");

            return result;
        }

        private List<Rainbow.Model.Bubble> GetAllBubbles()
        {
            List<Rainbow.Model.Bubble> result = null;

            String message = "";
            ManualResetEvent manualResetEvent = new ManualResetEvent(false);

            // Get Bubbles service 
            Rainbow.Bubbles RbBubbles = rbApplication.GetBubbles();

            AddStatusMessage($"\tGet all bubbles - START");
            RbBubbles.GetAllBubbles(callback =>
            {
                if (callback.Result.Success)
                    result = callback.Data;
                else
                {
                    message = callback.Result.ToString();
                    log.LogError($"Cannot get the list of bubbles - Error[{message}]");
                }

                manualResetEvent.Set();
            });
            manualResetEvent.WaitOne();

            if (result != null)
                AddStatusMessage($"\tGet all bubbles - Nb Bubbles[{result.Count}]- START");
            else
                AddStatusMessage($"\t\t*** ERROR *** - Cannot get the list of bubbles :[{message}");

            return result;
        }

        private Boolean LoginAsOrganizationAdmin()
        {
            return LoginAs(ApplicationInfo.ORGANIZATION_ADMIN_LOGIN, ApplicationInfo.ORGANIZATION_ADMIN_PWD, "organization_admin");
        }

        private Boolean LoginAsCompanyAdmin()
        {
            return LoginAs(CompanyAdmin.Email, CompanyAdmin.Password, "company_admin");
        }

        private Boolean LoginAs(String login, String pwd, String nameForLog)
        {
            String message = "";

            AddStatusMessage($"\tLogin as {nameForLog} - START");
            manualResetInitialization.Reset();
            rbApplication.Login(login, pwd, callback =>
            {
                if (!callback.Result.Success)
                    message = callback.Result.ToString();
            });

            // Login step is a asynchronous call - we need to wait event "InitializationPerformed" or "ConnectionStateChanged" ( with a disconnected state)
            manualResetInitialization.WaitOne();

            if (!rbApplication.IsInitialized())
            {
                AddStatusMessage($"\t\t*** ERROR *** - Cannot login as {nameForLog}:[{message}");
                return false;
            }
            AddStatusMessage($"\tLogin as {nameForLog} - END");

            return true;
        }

        private Boolean Logout()
        {
            String message = "";

            ManualResetEvent manualResetEvent = new ManualResetEvent(false);

            AddStatusMessage("\tLogout from RB - START");
            manualResetEvent.Reset();
            rbApplication.Logout(callback =>
            {
                if (!callback.Result.Success)
                    message = callback.Result.ToString();
                manualResetEvent.Set();

            });
            manualResetEvent.WaitOne();

            if (!String.IsNullOrEmpty(message))
            {
                AddStatusMessage($"\t\t*** ERROR *** - Cannot logout:[{message}");
                return false;
            }
            AddStatusMessage("\tLogout from- END");

            return true;
        }

        private void RbApplication_InitializationPerformed(object sender, EventArgs e)
        {
            // The init has been done successfully - so we set "manualResetInitialization"
            manualResetInitialization.Set();
        }

        private void RbApplication_ConnectionStateChanged(object sender, Rainbow.Events.ConnectionStateEventArgs e)
        {
            // If the connection is lost we need also to be informed  - so we set "manualResetInitialization"
            if (e.ConnectionState.State == Rainbow.Model.ConnectionState.Disconnected)
                manualResetInitialization.Set();
        }
    }
}
